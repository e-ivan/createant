<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.qnyy.re.business.mapper.ShakearoundDeviceMapper" >
  <resultMap id="BaseResultMap" type="com.qnyy.re.business.entity.ShakearoundDevice" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="i_beacon_id" property="iBeaconId" jdbcType="VARCHAR" />
    <result column="device_id" property="deviceId" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="TINYINT" />
    <result column="minor" property="minor" jdbcType="INTEGER" />
    <result column="major" property="major" jdbcType="INTEGER" />
    <result column="uuid" property="uuid" jdbcType="VARCHAR" />
    <result column="uid" property="uid" jdbcType="BIGINT" />
    <result column="apply_id" property="applyId" jdbcType="INTEGER" />
    <result column="apply_time" property="applyTime" jdbcType="TIMESTAMP" />
    <result column="store_id" property="storeId" jdbcType="BIGINT" />
    <result column="bind_time" property="bindTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <delete id="deleteByPrimaryKey" >
    delete from `shakearound_device`
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteBatch">
    DELETE FROM `shakearound_device` WHERE id IN
    <foreach collection="collection" item="id" open="(" separator="," close=")">
      #{id}
    </foreach>
  </delete>
  <insert id="insert" useGeneratedKeys="true" keyProperty="id" >
    insert into `shakearound_device` (i_beacon_id, device_id, status, minor, major, uuid, uid, apply_id,apply_time,store_id)
    values (#{iBeaconId}, #{deviceId}, #{status},#{minor}, #{major}, #{uuid}, #{uid}, #{applyId},#{applyTime},#{storeId})
  </insert>
  <insert id="insertBatch">
    INSERT INTO `shakearound_device` (i_beacon_id, device_id, status, minor, major, uuid, uid, apply_id,apply_time,store_id)
    VALUES
    <foreach collection="list" item="item" index="index" separator=",">
      (#{item.iBeaconId}, #{item.deviceId}, #{item.status},#{item.minor}, #{item.major}, #{item.uuid}, #{item.uid}, #{item.applyId},#{item.applyTime},#{item.storeId})
    </foreach>
  </insert>
  <update id="updateByPrimaryKey">
    update `shakearound_device`
    set i_beacon_id = #{iBeaconId,jdbcType=VARCHAR},
      device_id = #{deviceId},
      status = #{status,jdbcType=TINYINT},
      minor = #{minor,jdbcType=INTEGER},
      major = #{major,jdbcType=INTEGER},
      uuid = #{uuid,jdbcType=VARCHAR},
      uid = #{uid,jdbcType=BIGINT},
      apply_id = #{applyId,jdbcType=INTEGER},
      apply_time = #{applyTime},
      bind_time = #{bindTime},
      store_id = #{storeId}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <sql id="base_column">
    id, i_beacon_id, device_id, status, minor, major, uuid, uid, apply_id,apply_time,store_id,bind_time
  </sql>
  <sql id="base_where">
    <where>
      <if test="state >= 0">
        AND status = #{state}
      </if>
      <if test="deviceId >= 0">
        AND device_id = #{deviceId}
      </if>
      <if test="code >= 0">
        AND (minor = #{code} OR major = #{code})
      </if>
    </where>
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" >
    select <include refid="base_column"/>
    from `shakearound_device`
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="query" resultMap="BaseResultMap">
    SELECT
    <include refid="base_column"/>
    FROM `shakearound_device`
    <include refid="base_where"/>
    ORDER BY minor
    LIMIT #{start},#{pageSize}
  </select>
  <select id="queryCount" resultType="java.lang.Integer">
    SELECT COUNT(id) FROM `shakearound_device`
    <include refid="base_where"/>
  </select>
  <select id="selectByIBeaconId" resultMap="BaseResultMap">
    SELECT
    <include refid="base_column"/>
    FROM `shakearound_device`
    WHERE i_beacon_id = #{iBeaconId}
  </select>

  <select id="queryByUid" resultMap="BaseResultMap">
    SELECT
    <include refid="base_column"/>
    FROM `shakearound_device`
    <where>
      <if test="uid != null">
        AND uid = #{uid}
      </if>
      <if test="storeId != null">
         AND store_id = #{storeId}
      </if>
    </where>
  </select>
  <select id="queryStoreIdByUid" resultType="java.lang.Long">
    SELECT store_id FROM `shakearound_device` WHERE uid = #{uid} GROUP by store_id
  </select>
  <select id="selectByDeviceId" resultMap="BaseResultMap">
    SELECT
    <include refid="base_column"/>
    FROM `shakearound_device`
    WHERE device_id = #{deviceId}
  </select>
  <select id="getDeviceReMomentId" resultType="java.lang.Long">
    SELECT r.id FROM re_moment r LEFT JOIN shakearound_device d ON r.store_id = d.store_id AND r.uid = d.uid WHERE d.major = #{major} AND d.minor = #{minor} AND r.state = #{state}
    ORDER BY r.created LIMIT 0,1
  </select>
  <select id="selectBatch" resultMap="BaseResultMap">
    SELECT
    <include refid="base_column"/>
    FROM `shakearound_device`
    WHERE id IN
    <foreach collection="collection" item="id" open="(" separator="," close=")">
      #{id}
    </foreach>
  </select>
</mapper>